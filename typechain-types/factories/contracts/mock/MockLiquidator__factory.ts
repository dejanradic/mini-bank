/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockLiquidator,
  MockLiquidatorInterface,
} from "../../../contracts/mock/MockLiquidator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "collateralToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "borrowToken",
            type: "address",
          },
        ],
        internalType: "struct Globals.Pair",
        name: "pair",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "reciever",
        type: "address",
      },
    ],
    name: "liquidate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "collateralToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "borrowToken",
            type: "address",
          },
        ],
        internalType: "struct Globals.Pair",
        name: "pair",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "ratio",
        type: "uint256",
      },
    ],
    name: "setPairRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610399806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806338e86e7e1461003b57806362486b1c14610060575b600080fd5b61004e6100493660046102d2565b610075565b60405190815260200160405180910390f35b61007361006e36600461030f565b6101e2565b005b82516040516323b872dd60e01b8152336004820152306024820152604481018490526000916001600160a01b0316906323b872dd906064016020604051808303816000875af11580156100cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f0919061033a565b5083602001516001600160a01b031663a9059cbb8360008061015789602081810151915160408051606094851b6bffffffffffffffffffffffff19908116828601529290941b90911660348401528051602881850301815260489093019052815191012090565b8152602001908152602001600020546040518363ffffffff1660e01b81526004016101979291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156101b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101da919061033a565b509392505050565b8060008061023585602081810151915160408051606094851b6bffffffffffffffffffffffff19908116828601529290941b90911660348401528051602881850301815260489093019052815191012090565b81526020810191909152604001600020555050565b80356001600160a01b038116811461026157600080fd5b919050565b60006040828403121561027857600080fd5b6040516040810181811067ffffffffffffffff821117156102a957634e487b7160e01b600052604160045260246000fd5b6040529050806102b88361024a565b81526102c66020840161024a565b60208201525092915050565b6000806000608084860312156102e757600080fd5b6102f18585610266565b9250604084013591506103066060850161024a565b90509250925092565b6000806060838503121561032257600080fd5b61032c8484610266565b946040939093013593505050565b60006020828403121561034c57600080fd5b8151801515811461035c57600080fd5b939250505056fea264697066735822122070e641be7b3be3f4c02918afa14429f508dfcb9fb57c813a222a3bbf1569bcfb64736f6c63430008110033";

type MockLiquidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockLiquidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockLiquidator__factory extends ContractFactory {
  constructor(...args: MockLiquidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockLiquidator> {
    return super.deploy(overrides || {}) as Promise<MockLiquidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockLiquidator {
    return super.attach(address) as MockLiquidator;
  }
  override connect(signer: Signer): MockLiquidator__factory {
    return super.connect(signer) as MockLiquidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockLiquidatorInterface {
    return new utils.Interface(_abi) as MockLiquidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockLiquidator {
    return new Contract(address, _abi, signerOrProvider) as MockLiquidator;
  }
}
