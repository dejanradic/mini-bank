/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface UtilsInterface extends utils.Interface {
  functions: {
    "addDuration(uint256,uint256)": FunctionFragment;
    "doesArrayContainValueAddress(address[],address)": FunctionFragment;
    "doesArrayContainValueBytes32(bytes32[],bytes32)": FunctionFragment;
    "getFirstIndexByValueAddress(address[],address)": FunctionFragment;
    "getFirstIndexByValueBytes32(bytes32[],bytes32)": FunctionFragment;
    "getKey(string)": FunctionFragment;
    "removeFirstFromArrayByValueBytes32(bytes32[],bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addDuration"
      | "doesArrayContainValueAddress"
      | "doesArrayContainValueBytes32"
      | "getFirstIndexByValueAddress"
      | "getFirstIndexByValueBytes32"
      | "getKey"
      | "removeFirstFromArrayByValueBytes32"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addDuration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "doesArrayContainValueAddress",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "doesArrayContainValueBytes32",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstIndexByValueAddress",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFirstIndexByValueBytes32",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFirstFromArrayByValueBytes32",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesArrayContainValueAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesArrayContainValueBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstIndexByValueAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFirstIndexByValueBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFirstFromArrayByValueBytes32",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Utils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UtilsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addDuration(
      timestamp: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    doesArrayContainValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    doesArrayContainValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFirstIndexByValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFirstIndexByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getKey(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeFirstFromArrayByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  addDuration(
    timestamp: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  doesArrayContainValueAddress(
    array: PromiseOrValue<string>[],
    value: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  doesArrayContainValueBytes32(
    array: PromiseOrValue<BytesLike>[],
    value: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFirstIndexByValueAddress(
    array: PromiseOrValue<string>[],
    value: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFirstIndexByValueBytes32(
    array: PromiseOrValue<BytesLike>[],
    value: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getKey(s: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;

  removeFirstFromArrayByValueBytes32(
    array: PromiseOrValue<BytesLike>[],
    value: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    addDuration(
      timestamp: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doesArrayContainValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doesArrayContainValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFirstIndexByValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstIndexByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeFirstFromArrayByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    addDuration(
      timestamp: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doesArrayContainValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doesArrayContainValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstIndexByValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFirstIndexByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFirstFromArrayByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addDuration(
      timestamp: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doesArrayContainValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doesArrayContainValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstIndexByValueAddress(
      array: PromiseOrValue<string>[],
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFirstIndexByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFirstFromArrayByValueBytes32(
      array: PromiseOrValue<BytesLike>[],
      value: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
